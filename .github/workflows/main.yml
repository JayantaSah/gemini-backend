name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        pytest

    - name: Build Docker image
      run: |
        docker build -t gemini-backend:latest .

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/gemini-backend:latest

    - name: Deploy to Railway (Example - requires Railway CLI and project setup)
      run: |
        # This is an example. You would replace this with your actual deployment command.
        # For Railway, you might use `railway up` or a custom script.
        # Ensure Railway CLI is installed and configured in your CI/CD environment.
        echo "Simulating deployment to Railway..."
        # railway up --service gemini-backend

    - name: Deploy to Render (Example - requires Render CLI or API calls)
      run: |
        # This is an example. You would replace this with your actual deployment command.
        # For Render, you might use `render deploy` or a custom script.
        # Ensure Render CLI is installed and configured in your CI/CD environment.
        echo "Simulating deployment to Render..."
        # render deploy --service gemini-backend

    - name: Deploy to Fly.io (Example - requires Fly.io CLI)
      run: |
        # This is an example. You would replace this with your actual deployment command.
        # For Fly.io, you might use `flyctl deploy`.
        # Ensure Fly.io CLI is installed and configured in your CI/CD environment.
        echo "Simulating deployment to Fly.io..."
        # flyctl deploy --app gemini-backend

    - name: Deploy to AWS ECS (Example - requires AWS CLI and ECS setup)
      run: |
        # This is an example. You would replace this with your actual deployment command.
        # For AWS ECS, you would use the AWS CLI to update the service.
        # Ensure AWS CLI is installed and configured in your CI/CD environment.
        echo "Simulating deployment to AWS ECS..."
        # aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment
